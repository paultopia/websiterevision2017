Note to self: I've figured out how to apply a gradient to SVG picked out by class (i.e., the svg generated by vue font-awesome icons, which isn't directly accessible from code): 

The trick is the same as before, putting a class on it, but in addition the gradient can be defined in a separate empty svg element. Example: 

<svg width="200" height="200" class="foo" viewBox="0 0 1792 1792" xmlns="http://www.w3.org/2000/svg"><path d="M1675 832q0 53-37 90l-651 652q-39 37-91 37-53 0-90-37l-651-652q-38-36-38-90 0-53 38-91l74-75q39-37 91-37 53 0 90 37l294 294v-704q0-52 38-90t90-38h128q52 0 90 38t38 90v704l294-294q37-37 90-37 52 0 91 37l75 75q37 39 37 91z"/></svg>

<svg>
  <defs>
    <linearGradient id="linear" x1="0%" y1="0%" x2="100%" y2="0%">
      <stop offset="0%"   stop-color="#05a"/>
      <stop offset="100%" stop-color="#0a5"/>
    </linearGradient>
  </defs>
</svg>


svg.foo {
    fill: url(#linear);
}

The image in the first svg will get the fill from the second svg. https://jsfiddle.net/evytLk7g/1/

It looks like this can also be done with the colors set programmatically, i.e.: 

http://stackoverflow.com/questions/32048755/how-to-define-svg-gradient-in-page-global-css-file?rq=1


(From that SO: )

svg rect {
  fill: url(#mygradient);
}

#mygradient stop.start-color {
  stop-color: red;
}

#mygradient stop.end-color {
  stop-color: blue;
}

<svg width="0" height="0">
  <defs>
    <linearGradient id="mygradient">
      <stop offset="0" class="start-color"/>
      <stop offset="1" class="end-color"/>
    </linearGradient>
  </defs>
</svg>

<svg>
  <rect width="300" height="150"/>
</svg>


Documentation for how to create gradients:

https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Gradients